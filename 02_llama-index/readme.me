
# LlamaIndex RAG-based QA System

`llamaIndex` を使用したQAシステムのサンプル実装です。ユーザーがアップロードしたドキュメントに基づき、チャット形式で応答を生成します。

## ディレクトリ構造

```
02_llama-index
├── data                # 読み込むドキュメントを配置
└── app
    ├── chat_cli.py     # CLI形式のUI
    ├── common_setup.py # LLMおよび設定の読み込み
    ├── rag.py          # RAGのセットアップおよびカスタムリトリーバー
    └── vector_save.py  # インデックスの生成および保存
```

## セットアップ

1. `data` フォルダにドキュメントを配置してください。
2. `.env` ファイルを `app/secret/` フォルダに作成し、APIキーとモデル情報を設定してください（例: `OPENAI_API_KEY`, `OPENAI_CHAT_MODEL` など）。
3. 必要なパッケージをインストールしてください。

```bash
pip install -r requirements.txt
```

## プログラムの詳細

### 1. `vector_save.py`
このスクリプトは、`data` フォルダ内のドキュメントを読み込み、ベクトルインデックスとキーワードインデックスを生成します。生成されたインデックスは `storage` フォルダに保存されます。

- **使用方法**
  ```bash
  python vector_save.py --chunk-size 4096 --chunk-overlap 100
  ```
  - `--chunk-size` : テキストを分割するチャンクのサイズを指定
  - `--chunk-overlap` : チャンク間のオーバーラップサイズを指定
  - `--summarize` : 要約生成を有効にするオプション

- **主な機能**
  - ドキュメントを読み込み、メタデータ（ファイル名、更新日時）を取得
  - ベクトルインデックスとキーワードインデックスの生成
  - 既存のインデックスがある場合はそれを再利用または更新


### 2. `common_setup.py`
環境変数の読み込みとLLM（Large Language Model）の設定を行うモジュールです。`OpenAI`または`Azure OpenAI`のどちらかを選択して利用できます。

- **機能**
  - `.env` ファイルからAPIキーやモデル名を読み込み、`OpenAI` もしくは `Azure OpenAI` のインスタンスを初期化します。

### 3. `rag.py`
RAG（Retrieval Augmented Generation）システムをセットアップするためのモジュールです。カスタムリトリーバーを定義し、ベクトルインデックスとキーワードインデックスの両方を使用してドキュメントを効率的に検索します。

- **機能**
  - `VectorIndexRetriever` と `SimpleKeywordTableIndex` を組み合わせ、ハイブリッド検索モード（`AND` / `OR`）を設定できます。
  - クエリに基づく応答生成の設定を行います。

### 4. `chat_ui.py`
StreamlitベースのWeb UIです。ユーザーがチャット形式でドキュメントに関する質問を入力し、それに対する回答を表示します。

- **機能**
  - インデックスをキャッシュし、高速な検索を提供
  - RAGシステムの設定をサイドバーからカスタマイズ可能
  - 応答の際に参照したドキュメントチャンクの情報を表示

## インデックスの作成方法

まず、`data` フォルダにドキュメントを配置し、以下のコマンドでインデックスを作成します。

```bash
python vector_save.py --chunk-size 1024 --chunk-overlap 40 --summarize
```

## チャットの実行


### Web UIバージョン
```bash
streamlit run chat_ui.py
```

## 注意点
- `.env` ファイルには、APIキーやモデルの情報を正確に記述する必要があります。
- インデックスが存在しない場合は、`vector_save.py` を先に実行してください。

```

# Azureを使用するかどうかのフラグ (trueの場合はAzureを使用、falseの場合はOpenAI APIを直接使用)
USE_AZURE=true

# Azure OpenAI APIキー
AZURE_OPENAI_API_KEY=1234…
# Azure OpenAIのエンドポイント
AZURE_OPENAI_ENDPOINT=https://xxxxx.openai.azure.com/

# Azure OpenAIのエンベディングモデル名
AZURE_EMBEDDING_MODEL=text-embedding-3-small

# Azure OpenAIのチャットモデル名
AZURE_CHAT_MODEL=gpt-4o-mini

# OpenAI APIのバージョン
OPENAI_API_VERSION=2024-08-01-preview

# OpenAI API Key（Azureを使用しない場合に必須）
OPENAI_API_KEY=sk-proj-XXXXXX…
```

## ライセンス
本リポジトリはMITライセンスのもとで公開されています。
```

この `README.md` は、各プログラムの機能と設定方法についての基本的なガイドです。必要に応じて、環境やシステム構成に合わせて調整してください。
